[{"content":"❓ What is JavaScript？ ✅ JavaScript is a client-side scripting language. This language can update HTML and CSS and can be run on the browser. JavaScript can calculate, manipulate and validate data.\n❓ How to install JavaScript？ ✅ Please reference How to install NodeJS 18.\n❓ What is the language characteristics of JavaScript? ✅ A language of High-Level, single-threaded, garbage-collected, interpreted(or just-in-time compiled), prototype-based, multi-paradigm, dynamic language with a non-blocking event loop\n❓ What is mean by High Level? ✅ High-Level refers to the abstraction the language provides over the machine’s bare-metal hardware. JavaScript is considered high-level because it does not require direct interaction with the operating system, hardware. In addition, it does not require memory-management like C/C++ because the runtime always uses garbage-collection.\n❓ What is mean by Multi-Paradigm? ✅ Multi-Paradigm means the language is general-purpose or flexible. JS can be used for declarative (functional) or imperative (object-oriented) programming styles.\n❓ Is JavaScript Interpreted or Just-In-Time Compiled? ✅ Interpreted means the source code is converted to bytecode and executed at runtime (as opposed to being compiled to a machine code binary at build time). This is also why JS is commonly called a “scripting language”.\nIt was only interpreted, but modern JS engines like V8, Spidermonkey, and Nitro use various techniques to perform Just-in-Time Compilation or JIT for better performance. Developers still use JS like an interpreted language, while the engine magically compiles parts of source code to low-level machine code behind the scenes.\n❓ What is mean by prototype-based? ✅ Prototypal Inheritance means that objects can inherit behaviours from other objects. This differs from classical inheritance where you define a class or blueprint for each object and instantiate it.\n❓ Why JS is a Single-Threaded? ✅ Single-Threaded means that JS can only run one instruction at a time, even if your CPU has multiple cores and available threads.\n❓ How does JavaScript handle jobs at the same time concurrently? ✅ Event Loop refers to a feature implemented by engines like V8 that allow JS to offload tasks to separate threads.\nBrowser and Node APIs execute long-running tasks separately from the the main JS thread Then enqueue a callback function (which you define) to run on the main thread when the task is complete. This is why JS is called non-blocking because it should only ever wait for synchronous code from your JS functions. Think of the Event Loop as message queue between the single JS thread and the OS. Blocking Event Loop Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // L1 console.log(\u0026#39;🥪 Synchronous 1\u0026#39;); // L2 setTimeout(_ =\u0026gt; console.log(`🍅 Timeout 2`), 0); // L3 Promise.resolve().then(_ =\u0026gt; console.log(\u0026#39;🍍 Promise 3\u0026#39;)); // L4 console.log(\u0026#39;🥪 Synchronous 4\u0026#39;); // Output // 🥪 Synchronous 1 // 🥪 Synchronous 4 // 🍍 Promise 3 // 🍅 Timeout 2 Explanation: It will add Sync, Promise, Timeout Code to the event queue, and then check or pop the task with task priority:\n1. Sync Task 2. Promise(Microtask) 3. Timeout(Macrotask) ‼Particularly: If the microtask can not be done in a event loop, it will switch order with macro task.\nAnother Blocking Event Loop Example Promise.resolve(result) without wrapping the task is still blocking\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Pre-defined slow task const codeBlocker = () =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { let i = 0; while(i \u0026lt; 1000000000) {i++;} resolve(\u0026#39;🐷 billion loops done\u0026#39;); }) } // L1 console.log(\u0026#39;🥪 Synchronous 1\u0026#39;); // L2 codeBlocker.then(log); // L3 console.log(\u0026#39;🥪 Synchronous 2\u0026#39;); // Output // 🥪 Synchronous 1 \u0026lt;0ms\u0026gt; // 🥪 Synchronous 2 \u0026lt;730ms\u0026gt; // 🐷 billion loops done \u0026lt;731ms\u0026gt; Explanation:: The only line in the above code treated as micro task is resolve('🐷 billion loops done'), not the time consuming task.\nPromise.resolve().then(result and task) is non-blocking finally 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Pre-defined slow task const codeBlocker = () =\u0026gt; { return Promise.resolve().then(v =\u0026gt; { let i = 0; while(i \u0026lt; 1000000000) {i++;} return(\u0026#39;🐷 billion loops done\u0026#39;); }) } // L1 console.log(\u0026#39;🥪 Synchronous 1\u0026#39;); // L2 codeBlocker.then(log); // L3 console.log(\u0026#39;🥪 Synchronous 2\u0026#39;); // Output // 🥪 Synchronous 1 \u0026lt;0ms\u0026gt; // 🥪 Synchronous 2 \u0026lt;4ms\u0026gt; // 🐷 billion loops done \u0026lt;731ms\u0026gt; References How JavaScript Works What is JavaScript ","date":"2022-12-14T00:00:00Z","permalink":"https://cat-sheet.netlify.app/p/what-is-javascript/","title":"❓What is JavaScript?"},{"content":"[[C++]] [[How to install]]\nInstallation Guide If scoop is not installed: please execute this command ![[How to install package manager#^75b4df]] Then you can install Mingw\n1 scoop install mingw ","date":"2023-01-14T00:00:00Z","permalink":"https://cat-sheet.netlify.app/p/mingw/","title":"How to install Mingw in Windows?"},{"content":"[[How to install]] [[Go]] [[Hugo]]\n❓How to install Hugo in Ubuntu or Debian? {depreciated} 1 2 sudo apt install hugo sudo apt install golang ❓How to install Hugo in Fedora or RHEL8 or above? 1 2 sudo dnf install hugo sudo dnf install golang ❓How to install Hugo in macOS? Firstly, install homebrew package manager: ![[How to install package manager#^75b4df]] Then:\n1 2 brew install hugo brew install golang ❓How to install Hugo in Windows? Firstly, install scoop package manager if not existing: ![[How to install package manager#^75b4df]] Then:\n1 2 scoop install hugo-extended scoop install go ","date":"2023-01-13T00:00:00Z","permalink":"https://cat-sheet.netlify.app/p/install-hugo/","title":"❓How to install Hugo"},{"content":"","date":"2023-01-01T00:00:00Z","permalink":"https://cat-sheet.netlify.app/p/install-nodejs/","title":"❓How to install nodeJS 18?"},{"content":"Please visit Go by Example to understand basic golang syntax https://gobyexample.com/\nSyntax Reference Guide\nHello World Values Variables Constants For If/Else Switch Arrays Slices Maps Range Functions Multiple Return Values Variadic Functions Closures Recursion Pointers Strings and Runes Structs Methods Interfaces Struct Embedding Generics Errors Goroutines Channels Channel Buffering Channel Synchronization Channel Directions Select Timeouts Non-Blocking Channel Operations Closing Channels Range over Channels Timers Tickers Worker Pools WaitGroups Rate Limiting Atomic Counters Mutexes Stateful Goroutines Sorting Sorting by Functions Panic Defer Recover String Functions String Formatting Text Templates Regular Expressions JSON XML Time Epoch Time Formatting / Parsing Random Numbers Number Parsing URL Parsing SHA256 Hashes Base64 Encoding Reading Files Writing Files Line Filters File Paths Directories Temporary Files and Directories Embed Directive Testing and Benchmarking Command-Line Arguments Command-Line Flags Command-Line Subcommands Environment Variables HTTP Client HTTP Server Context Spawning Processes Exec\u0026rsquo;ing Processes Signals Exit ","date":"0001-01-01T00:00:00Z","permalink":"https://cat-sheet.netlify.app/p/","title":""}]